~*Object-Oriented Programming*~ is a programming style that is intended to make thinking about programming closer
to thinking about the real world.

-Each object is an independent unit with a *unique identity*, just as objects in the real world are.
-Objects also have *characteristics*, which are used to describe them.
-*Attributes* describes the current state of an object.
-*Behavior* is specific to the object's type.

~*Classes*~ describes what the *object* will be, but is separate from the object itself.
-You can use the same class to create multiple objects.
-tl;dr an Object is an instance of a class

~*Methods*~ is a collection of statements that are grouped together
to perform an operation; they define behavior. 

class MyClass {

  public static void main(String[ ] args) {
    sayHello();
  }

  static void sayHello() {
    System.out.println("Hello World!");
  }
}
// Outputs "Hello World!"

-You can call a method as many times as necessary.

-You can also create a method that takes some data, called *parameters*, along with it when you call it.

class MyClass {
  public static void main(String[ ] args) {
    sayHello("David");
    sayHello("Amy");
  }

  static void sayHello(String name) {
    System.out.println("Hello " + name);
  }
}
// Hello David
// Hello Amy

~*Method Return Types*~

-The *return* keyword can be used in methods to return a value

static *int* sum(int val 1, int val 1){
	return val1 + val2;
}

-*int* is the *return type* in the above method.

class MyClass {

 public static void main(String[ ] args) {
    int x = sum(2, 5);
    System.out.println(x);
  }
}
static int sum(int val1, int val2) {
  return val1 + val2;
}
// Outputs "7"

-When you do NOT need to return any value from your method,
use the keyword *void*

~*Creating Classes and Objects*~

-To create a Class, right click on the *src* folder in Eclipse, select *Create->New->Class.*
Give your class a name, and click *Finish.*

public class Animal {

}

-You can then add *methods* to your new class.

public class Animal {
	void bark() {
		System.out.println("Woof-Woof");
	}
}

*Creating Objects*

-Head over to *main* and create a new object of your class.

class MyClass {
	public static void main(String[] args) {
		//The following creates an object
		Animal dog = new Animal();
		dog.bark();
	}
}
//Outputs "Woof-Woof"

-*dog* is an object of type *Animal*, which can call its *bark()* method (dog.bark();).

*Definint Attributes*

-Attributes are basically variables within a class.

public class Vehicle {
	int maxSpeed;
	int wheels;
	String color;
	double fuelCapacity;
	
	void horn() {
		System.out.println("Beep!");
	}
}

-maxSpeed, wheels etc. are the *attributes* of our Vehicle class.

class MyClass {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        Vehicle v2 = new Vehicle();
        v1.color = "red";
        v2.horn();
        System.out.println(v1.color);
    }
}
//Output:
Beep!
red

*Access Modifiers* are used to set the level of access.
-You can use access modifiers for classes, attributes, and methods.

-*public*: the class is accessible by any other class
-*default*: the class is accessible only by classes in the same package.
-*protected*: Provides the same access as *default*, with the addition that
subclasses can access protected methods and variables of the *superclass.*
*private*: Accessible only within the declared class itself.

-It is best practice to keep the *variables/attributes* within a class *private*.
The variables are accessible and modified using *Getters and Setters.*

*Getters and Setters* are used to effectively protect your data when creating classes.

public class Vehicle {
  private String color;

  // Getter
  public String getColor() {
    return color;
  }

 // Setter
  public void setColor(String c) {
    this.color = c;
  }
}

-The *getter method* returns the value of the attribute.
-The *setter method* takes a parameter and assigns it to the attribute.
-The keyword *this* is used to refer to the current object. *this.color* is the
	color attribute of the current object.

-Once the getters and setters are defined, the class can be imported and then used in *main.*

public static void main(String[ ] args) {
  Vehicle v1 = new Vehicle();

  v1.setColor("Red");

  System.out.println(v1.getColor());
}

//Outputs "Red"

*Constructors* are special methods invoked when an object is created and are used to initialize them.
-They can be used to provide *initial default values* for object attributes.

-A constructor name must be the same as its class name, and must have no explicit return type.

public class Vehicle {
  private String color;

  Vehicle() {
     color = "Red";
  }
}
-The constructor is called when you create an object using the *new* keyword.

public class MyClass {
  public static void main(String[ ] args) {

    Vehicle v = new Vehicle("Blue");

  }
}

-A single-class can have multiple constructors with different numbers
	of parameters.
-The setter methods inside the constructors can be used to set the attribute values.

public class Vehicle {
  private String color;

  Vehicle() {
    this.setColor("Red");
  }
  Vehicle(String c) {
    this.setColor(c);
  }

  // Setter
  public void setColor(String c) {
    this.color = c;
  }
}

-Now, we can use the constructors to create objects of our class.

//color will be "Red"
Vehicle v1 = new Vehicle();

//color will be "Green"
Vehicle v2 = new Vehicle("Green"); 

*Value & Reference Types* 

*Value types* are basic types. and include;
	byte, short, int, long, float, boolean, and chat
-These data types store the values assigned to them in the corresponding memory locations.
-When you pass them to a method, you basically operate on the variable's *value*, rather than the variable itself.

public class MyClass {
  public static void main(String[ ] args) {
    *int x = 5;*
    addOneTo(*x*);
    System.out.println(*x*);       
  }
  static void addOneTo(int num) {
    num = num + 1;
  }
}
// Outputs "5"

*Reference types* stores a reference to the memory location where the corresponding data is stored.

-When you create an object using the *constructor*, you create a *reference variable.*

public class MyClass {
  public static void main(String[ ] args) {
    Person j;
    j = new Person("John");
    j.setAge(20);
    celebrateBirthday(j);
    System.out.println(j.getAge());
  }
  static void celebrateBirthday(Person p) {
    p.setAge(p.getAge() + 1);
  }
}
//Outputs "21"

-*Arrays* and *Strings* are also reference data types.

*The Math Class* provides predefined methods for mathematical operations.

-*JDK* defines useful classes such as the *Math* class.

*Math.abs()* returns the absolute value of its parameter.

int a = Math.abs(10); //10
int b = Math.abs(-20); //20

*Math.celi()* rounds a floating point value *up* to the nearest *int* value.

double c = Math.ceil(7.342); //8.0

*Math.floor()* rounds a floating point value *down* to the nearest *int* value.

double f = Math.floor(7.343); //7.0

*Math.max()* returns the largest of its parameters.

int m = Math.max(10, 20); //20

*Math.min()* returns the smallest parameter.

int m = Math.min(10, 20); //10

*Math.pow()* takes two parameters and returns the first parameter and raises it to the power of the second parameter.

double p = Math.pow(2, 3); //8.0

*Static*

-When you declare a variable or a method as *static*, it belongs to the class, rather than to a specific instance.

public class Counter {
  public *static* int COUNT=0;
  Counter() {
    COUNT++;
  }
}

-The COUNT variable will be shared by all objects of that class.
-Now, we can create objects of our Counter class in *main*, and access the *static* variable.

public class MyClass {
  public static void main(String[ ] args) {
    Counter c1 = new Counter();
    Counter c2 = new Counter();
    System.out.println(Counter.COUNT);
  }
}
//Outputs "2"

-The output is 2, because the COUNT variable is *static* and gets incremented by one each time a new object
of the Counter class is created.

-The same concept applies to *static* methods.

public class Vehicle {
  public *static* void horn() {
    System.out.println("Beep");
  }
}

-Now, the *horn* method can be called w/o creating an object.

public class MyClass {
  public static void main(String[ ] args) {
    Vehicle.horn();
  }
}

//Outputs "Beep"

*Final*

-Use the *final* keyword to make a variable constant, so that it can be assigned only once.

class MyClass {
  public static *final* double PI = 3.14; 
  public static void main(String[ ] args) {
    System.out.println(PI);
  }
}

-Pi is now a constant. Any attempt to assign it a value will cause an error.
-

*Packages* are used to avoid name conflicts and to controll access to classes.

-A *package* can be defined as a group made up of similar types of classes, along with sub-packages.
-To create a package, right-click on the *src* directory.
-You need to import the classes that are inside a package to use it in another class.